# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the ODPi Egeria project.
name: "Run CTS"
on:
  # Only manually for now
  workflow_dispatch:

jobs:
  kind:
    strategy:
      matrix:
        connector: ['org.odpi.openmetadata.adapters.repositoryservices.inmemory.repositoryconnector.InMemoryOMRSRepositoryConnectorProvider','org.odpi.openmetadata.adapters.repositoryservices.graphrepository.repositoryconnector.GraphOMRSRepositoryConnectorProvider']
    runs-on: ubuntu-22.04
    steps:
      - name: setup Helm
        uses: azure/setup-helm@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v3
        name: checkout code
      - uses: helm/kind-action@v1
        name: setup kind
        with:
          cluster_name: cts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Check k8s cluster
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${KUBECONFIG}
      - name: Setup Egeria Repo & install CTS chart
        run: |
          helm repo add egeria https://odpi.github.io/egeria-charts
          helm install cts egeria/egeria-cts --set-string tut.connectorProvider=${{ matrix.connector }} --set-string imageDefaults.tag="3.14" --set-string resources.requests.memory=4Gi --set-string resources.limits.memory=7Gi --set resources.requests.cpu=0m --set records=1 --set strimzi-kafka-operator.resources.requests.cpu=0m
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # === debug
      #- name: Setup upterm session
      #  uses: lhotari/action-upterm@v1
      #  with:
      #    ## limits ssh access and adds the ssh public key for the user which triggered the workflow
      #    limit-access-to-actor: true
      # === debug
      - name: Check Chart installed & running
        run: |
          helm list
          kubectl get pods
      - name: Wait for Strimzi Operator to be ready
        run: |
          until kubectl get pod -l strimzi.io/kind=cluster-operator -o go-template='{{.items | len}}' | grep -qxF 1; do
          echo "Waiting for pod"
          sleep 1
          done
          kubectl wait pods --selector=strimzi.io/kind=cluster-operator --for condition=Ready --timeout=10m
      - name: Wait for Zookeeper to be ready
        run: |
          until kubectl get pod -l app.kubernetes.io/name=zookeeper -o go-template='{{.items | len}}' | grep -qxF 1; do
          echo "Waiting for pod"
          sleep 1
          done
          kubectl wait pods --selector=app.kubernetes.io/name=zookeeper --for condition=Ready --timeout=10m
      - name: Wait for Kafka to be ready
        run: |
          until kubectl get pod -l app.kubernetes.io/name=kafka -o go-template='{{.items | len}}' | grep -qxF 1; do
          echo "Waiting for pod"
          sleep 1
          done
          kubectl wait pods --selector=app.kubernetes.io/name=kafka --for condition=Ready --timeout=10m
      - name: Wait for CTS platform to be ready
        run: |
          until kubectl get pod -l app.kubernetes.io/component=platform -o go-template='{{.items | len}}' | grep -qxF 1; do
          echo "Waiting for pod"
          sleep 1
          done
          kubectl wait pods --selector=app.kubernetes.io/component=platform --for condition=Ready --timeout=10m
      # We could wait for the init job to complete, but the risk is it gets purged - so for now, skip this check
      - name: Wait for CTS results to be available (this takes a long time - HOURS)
        # This waits for the report pod to go ready - this means results are ready
        run: |
          until kubectl get pod -l app.kubernetes.io/component=report -o go-template='{{.items | len}}' | grep -qxF 1; do
          echo "Waiting for pod"
          sleep 1
          done
          kubectl wait pods --selector=app.kubernetes.io/component=report --for condition=Ready --timeout=24h
      - name: Gather CTS report
        run: |
          kubectl exec $(kubectl get pod -l app.kubernetes.io/component=report) -- sh -c 'cat /export/pipe' | tar -xvf -
      - name: Upload CTS report
        uses: actions/upload-artifact@v3
        with:
          name: CTS report ${{ matrix.connector }}
          path: export/cts.tar.gz
